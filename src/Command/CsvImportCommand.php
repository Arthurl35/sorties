<?php

namespace App\Command;

use App\Entity\Participant;
use App\Entity\Site;
use League\Csv\Reader;
use App\Utils\Upload;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class CsvImportCommand extends Command
{
    private $entityManager;
    private UserPasswordHasherInterface $userPasswordHasher;

    public function __construct(EntityManagerInterface $entityManager,
                                UserPasswordHasherInterface $userPasswordHasher)
    {
        parent::__construct();
        $this->entityManager = $entityManager;
        $this->userPasswordHasher = new UserPasswordHasher();
    }

    protected function configure()
    {
//        parent::configure(); // TODO: Change the autogenerated stub
        $this
            ->setName('csv:import')
            ->setDescription('Import un fichier csv')
            ;
    }

    public function execute(InputInterface $input,
                               OutputInterface $output,
                               $id = null)
    {
//        parent::execute($input, $output); // TODO: Change the autogenerated stub

        $reader = Reader::createFromPath('%kernel.root_dir%/../public/uploads/csv.csv');
        $reader->setHeaderOffset(0);

        foreach ($reader->getRecords() as $row){
        $Participant = new Participant();
        $site = new Site();
        $site->setNom($row['site']);
        $Participant->setRoles(array($row['roles']))
            ->setBackdrop('test.png')
            ->setEmail($row['email'])
            ->setPrenom($row['prenom'])
            ->setNom($row['nom'])
            ->setTelephone($row['telephone'])
            ->setAdministrateur($row['administrateur'])
            ->setActif($row['actif'])
//            ->setPassword( $this->userPasswordHasher->hashPassword($Participant, $row['password']))
            ->setPassword( $this->userPasswordHasher->hashPassword($Participant, $row['password']))
            ->setSite($site);

        $this->entityManager->persist($Participant);
        $this->entityManager->persist($site);
    }

        $this->entityManager->flush();






    }
}